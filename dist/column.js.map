{"version":3,"sources":["../lib/column.mjs"],"names":["gapList","fractionSizeList","columnSizeToClassName","size","isOffset","prefix","asInt","parseInt","undefined","Object","values","includes","Error","Columns","React","Component","render","classes","props","mobile","list","boolList","transform","desktopOnly","center","multiline","gap","className","children","propTypes","classNamePropType","PropTypes","bool","oneOf","node","columnSizePropTypes","keys","Column","value","offset","narrow","allModifiersPropsList","colSize","colOffset"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  classString,\n  addClassesFromOptions,\n  addClassesWithViewportSuffix,\n} from \"./utils/class\";\nimport {\n  boolList,\n} from \"./utils/const\";\nimport {\n  boolProp,\n} from \"./utils/transform\";\nimport {\n  classNamePropType,\n  viewportPrefixablePropType,\n  allModifiersPropsList,\n} from \"./utils/props\";\nimport {\n  bringAll,\n} from \"./utils/modifier\";\n\n/** Acceptable value for gap size */\nconst gapList = [\n  \"gapless\",\n  0, 1, 2, 3, 4, 5, 6, 7, 8,\n];\n\n/** Acceptable value for column size */\nconst fractionSizeList = {\n  \"3/4\": \"three-quarters\",\n  \"2/3\": \"two-thirds\",\n  \"1/2\": \"half\",\n  \"1/3\": \"one-third\",\n  \"1/4\": \"one-quarter\",\n  \"1/5\": \"one-fifth\",\n  \"2/5\": \"two-fifths\",\n  \"3/5\": \"three-fifths\",\n  \"4/5\": \"four-fifths\",\n};\n\n/** Convert a human readable column size to a class name.\n * \n * @param {number|string} size\n * @param {bool} isOffset\n * True to get an offset instead of a column size\n * \n * @returns {string}\n */\nconst columnSizeToClassName = (size, isOffset) => {\n  const prefix = isOffset ? \"is-offset\" : \"is-\";\n  const asInt = parseInt(size);\n  if (asInt == 1) {\n    return undefined;\n  }\n  if (asInt >= 2 && asInt <= 11) {\n    return `${prefix}${asInt}`;\n  }\n  if (fractionSizeList[size]) {\n    return `${prefix}${fractionSizeList[size]}`;\n  }\n  if (Object.values(fractionSizeList).includes(size)) {\n    return `${prefix}${size}`;\n  }\n  throw new Error(`Invalid column size \"${size}\"`);\n};\n\n/**\n * Props:\n * - mobile: bool Enable the columns on mobile too (default false)\n * - desktopOnly: bool Enable the columns only on desktop (default false)\n * - gap: number (0-8) size of the gap between columns\n * - multiline: bool\n * - center: bool\n */\nexport class Columns extends React.Component {\n  render() {\n    const classes = [\"columns\"];\n    addClassesFromOptions(\n      classes,\n      this.props,\n      undefined,\n      {\n        mobile: {list: boolList, transform: boolProp(\"mobile\")},\n        desktopOnly: {list: boolList, transform: boolProp(\"desktop\")},\n        center: {list: boolList, transform: boolProp(\"centered\")},\n        multiline: {list: boolList, transform: boolProp(\"mutliline\")},\n        gap: {list: gapList},\n      });\n    return <div\n      className={classString(classes, this.props.className)}>\n      {this.props.children}\n    </div>;\n  }\n}\nColumns.propTypes = {\n  className: classNamePropType,\n  mobile: PropTypes.bool,\n  desktopOnly: PropTypes.bool,\n  gap: PropTypes.oneOf(gapList),\n  multiline: PropTypes.bool,\n  center: PropTypes.bool,\n  children: PropTypes.node,\n};\n\n/** PropType for a single size value */\nconst columnSizePropTypes = PropTypes.oneOf([\n  ...Object.keys(fractionSizeList),\n  ...Object.values(fractionSizeList),\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n]);\n\n/**\n * Props:\n * - colSize: either a division of 12 (1, 2, 3...), a textual name from Bulma\n *   (four-fifths, three-quarters) or an equivalent fraction (\"3/4\", \"2/3\",\n *   \"1/2\", \"1/3\", \"1/4\", \"1/5\", \"2/5\", \"3/5\", \"4/5\").\n *   To set different size for different viewports use an object whose keys are\n *   viewport names (\"mobile\", \"tablet\", \"desktop\", \"widescreen\", \"fullhd\")\n * - colOffset: space before the column. Same convention as size.\n * - narrow: bool|array: if true, the column is always narrow. If an array, it\n *   must be a list of valid breakpoints.\n * - All Bulma modifiers\n */\nexport class Column extends React.Component {\n  render() {\n    const classes = [\"column\"];\n    bringAll(classes, this.props);\n    addClassesWithViewportSuffix(\n      classes,\n      this.props.size,\n      value => columnSizeToClassName(value, false));\n    addClassesWithViewportSuffix(\n      classes,\n      this.props.offset,\n      value => columnSizeToClassName(value, true));\n    addClassesWithViewportSuffix(\n      classes,\n      this.props.narrow,\n      () => \"is-narrow\");\n    return <div \n      className={classString(classes, this.props.className)}>\n      {this.props.children}\n    </div>;\n  }\n}\nColumn.propTypes = {\n  className: classNamePropType,\n  ...allModifiersPropsList,\n  colSize: viewportPrefixablePropType(columnSizePropTypes),\n  colOffset: viewportPrefixablePropType(columnSizePropTypes),\n  narrow: viewportPrefixablePropType(PropTypes.bool),\n  children: PropTypes.node,\n};\n\nexport default {\n  Columns,\n  Column,\n};"],"file":"column.js"}