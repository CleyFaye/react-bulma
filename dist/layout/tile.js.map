{"version":3,"sources":["../../lib/layout/tile.mjs"],"names":["widthList","Tile","React","Component","constructor","props","isAncestor","isChild","state","Object","assign","_parent","_isAncestor","_isChild","componentDidMount","Children","forEach","children","type","Content","setState","getBaseClasses","render","classes","undefined","vertical","list","boolList","transform","width","push","className","propTypes","classNamePropType","PropTypes","oneOf","bool","node","Ancestor","allModifiersPropList"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  classString,\n  addClassesFromOptions,\n} from \"../utils/class\";\nimport {\n  boolList,\n} from \"../utils/const\";\nimport {\n  boolProp,\n} from \"../utils/transform\";\nimport {\n  classNamePropType,\n  allModifiersPropList,\n} from \"../utils/props\";\nimport {\n  bringAll,\n} from \"../utils/modifier\";\n\n/** List of possible tile width */\nconst widthList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n/**\n * Props:\n * - className\n * - width: the width of the tile (from the 12 columns available)\n * - vertical: if the child tiles must be aligned vertically\n *\n * @note\n * To produce a proper Tile layout, you must have at least a depth of three\n * elements:\n * - A \"top-level\" tile (using Tile.Ancestor)\n * - An intermediate tile (using Tile)\n * - A \"content\" tile (using Tile.Content)\n *\n * Most basic usage:\n * @begincode\n * <Tile.Ancestor>\n *   <Tile>\n *     <Tile.Content>\n *       <div>Hello</div>\n *     </Tile.Content>\n *   </Tile>\n * </Tile.Ancestor>\n * @endcode\n */\nexport default class Tile extends React.Component {\n  constructor(props, isAncestor, isChild) {\n    super(props);\n    this.state = Object.assign({\n      _parent: false,\n    }, this.state || {});\n    this._isAncestor = isAncestor;\n    this._isChild = isChild;\n  }\n\n  componentDidMount() {\n    React.Children.forEach(this.props.children, children => {\n      if (children.type === Content) {\n        this.setState({_parent: true});\n      }\n    });\n  }\n\n  getBaseClasses() {\n    return [\"tile\"];\n  }\n\n  render() {\n    const classes = this.getBaseClasses();\n    addClassesFromOptions(\n      classes,\n      this.props,\n      undefined,\n      {\n        vertical: {list: boolList, transform: boolProp(\"vertical\")},\n        width: {list: widthList},\n      });\n    if (this.state._parent) {\n      classes.push(\"is-parent\");\n    }\n    if (this._isAncestor) {\n      classes.push(\"is-ancestor\");\n    }\n    if (this._isChild) {\n      classes.push(\"is-child\");\n    }\n    return <div className={classString(classes, this.props.className)}>\n      {this.props.children}\n    </div>;\n  }\n}\nTile.propTypes = {\n  className: classNamePropType,\n  width: PropTypes.oneOf(widthList),\n  vertical: PropTypes.bool,\n  children: PropTypes.node,\n};\n\nclass Ancestor extends Tile {\n  constructor(props) {\n    super(props, true);\n  }\n}\nTile.Ancestor = Ancestor;\n\n/**\n * Props:\n * - All bulma modifiers\n */\nclass Content extends Tile {\n  constructor(props) {\n    super(props, false, true);\n  }\n\n  getBaseClasses() {\n    const classes = super.getBaseClasses();\n    bringAll(classes, this.props);\n  }\n}\nContent.propTypes = {\n  ...Tile.propTypes,\n  ...allModifiersPropList,\n};\nTile.Content = Content;"],"file":"tile.js"}