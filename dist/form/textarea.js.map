{"version":3,"sources":["../../lib/form/textarea.mjs"],"names":["Textarea","ControlledInput","render","classes","props","rows","placeholder","ev","setStateValue","target","value","getReadOnly","className","getStateValue","propTypes","classNamePropType","PropTypes","number","string","allModifiersPropList"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAGA;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;AAgBe,MAAMA,QAAN,SAAuBC,wBAAvB,CAAuC;AACpDC,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG,CAAC,UAAD,CAAhB;AACA,4BAASA,OAAT,EAAkB,KAAKC,KAAvB;AACA,WAAO;AACL,MAAA,IAAI,EAAE,KAAKA,KAAL,CAAWC,IADZ;AAEL,MAAA,WAAW,EAAE,KAAKD,KAAL,CAAWE,WAFnB;AAGL,MAAA,QAAQ,EAAEC,EAAE,IAAI,KAAKC,aAAL,CAAmBD,EAAE,CAACE,MAAH,CAAUC,KAA7B,CAHX;AAIL,MAAA,OAAO,EAAEH,EAAE,IAAI,KAAKC,aAAL,CAAmBD,EAAE,CAACE,MAAH,CAAUC,KAA7B,CAJV;AAKL,MAAA,QAAQ,EAAE,KAAKC,WAAL,EALL;AAML,MAAA,SAAS,EAAE,wBAAYR,OAAZ,EAAqB,KAAKC,KAAL,CAAWQ,SAAhC;AANN,OAOJ,KAAKC,aAAL,EAPI,CAAP;AASD;;AAbmD;;;AAetDb,QAAQ,CAACc,SAAT,GAAqB;AACnBF,EAAAA,SAAS,EAAEG,wBADQ;AAEnBV,EAAAA,IAAI,EAAEW,mBAAUC,MAFG;AAGnBX,EAAAA,WAAW,EAAEU,mBAAUE,MAHJ;AAInB,KAAGC;AAJgB,CAArB","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ControlledInput from \"./controlledinput\";\nimport {\n  classString,\n} from \"../utils/class\";\nimport {\n  bringAll,\n} from \"../utils/modifier\";\nimport {\n  classNamePropType,\n  allModifiersPropList,\n} from \"../utils/props\";\n\n/**\n * Props:\n * - className\n * - rows\n * - placeholder\n * - readOnly*\n * - value*\n * - onChange\n * - stateName: Name of the property referenced in stateObj.state. If not\n * provided will default to name.\n * - name: HTML name property for the form\n * - stateObj: object with both state and setState to handle updates\n * - All bulma modifiers\n * \n * See form.Input for stateObj behavior.\n */\nexport default class Textarea extends ControlledInput {\n  render() {\n    const classes = [\"textarea\"];\n    bringAll(classes, this.props);\n    return <textarea\n      rows={this.props.rows}\n      placeholder={this.props.placeholder}\n      onChange={ev => this.setStateValue(ev.target.value)}\n      onKeyUp={ev => this.setStateValue(ev.target.value)}\n      readOnly={this.getReadOnly()}\n      className={classString(classes, this.props.className)}>\n      {this.getStateValue()}\n    </textarea>;\n  }\n}\nTextarea.propTypes = {\n  className: classNamePropType,\n  rows: PropTypes.number,\n  placeholder: PropTypes.string,\n  ...allModifiersPropList,\n};"],"file":"textarea.js"}