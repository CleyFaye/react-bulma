{"version":3,"sources":["../../lib/form/input.mjs"],"names":["Input","ControlledInput","_getType","props","type","render","classes","static","push","className","name","placeholder","getStateValue","getReadOnly","disabled","inputRef","ev","setStateValue","target","value","propTypes","classNamePropType","PropTypes","oneOf","string","bool","func","allModifiersPropList"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAGA;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;AAqBe,MAAMA,KAAN,SAAoBC,wBAApB,CAAoC;AACjDC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKC,KAAL,CAAWC,IAAX,IAAmB,MAA1B;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG,CAAC,OAAD,CAAhB;AACA,4BAASA,OAAT,EAAkB,KAAKH,KAAvB;;AACA,QAAI,KAAKA,KAAL,CAAWI,MAAf,EAAuB;AACrBD,MAAAA,OAAO,CAACE,IAAR,CAAa,WAAb;AACD;;AACD,WAAO;AACL,MAAA,SAAS,EAAE,wBAAYF,OAAZ,EAAqB,KAAKH,KAAL,CAAWM,SAAhC,CADN;AAEL,MAAA,IAAI,EAAE,KAAKN,KAAL,CAAWO,IAFZ;AAGL,MAAA,IAAI,EAAE,KAAKR,QAAL,EAHD;AAIL,MAAA,WAAW,EAAE,KAAKC,KAAL,CAAWQ,WAJnB;AAKL,MAAA,KAAK,EAAE,KAAKC,aAAL,EALF;AAML,MAAA,QAAQ,EAAE,KAAKC,WAAL,EANL;AAOL,MAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWW,QAPhB;AAQL,MAAA,GAAG,EAAE,KAAKX,KAAL,CAAWY,QARX;AASL,MAAA,QAAQ,EAAEC,EAAE,IAAI,KAAKC,aAAL,CAAmBD,EAAE,CAACE,MAAH,CAAUC,KAA7B;AATX,MAAP;AAUD;;AArBgD;;;AAuBnDnB,KAAK,CAACoB,SAAN,GAAkB;AAChBX,EAAAA,SAAS,EAAEY,wBADK;AAEhBjB,EAAAA,IAAI,EAAEkB,mBAAUC,KAAV,CAAgB,CACpB,MADoB,EAEpB,UAFoB,EAGpB,OAHoB,EAIpB,KAJoB,EAKpB,QALoB,CAAhB,CAFU;AAShBZ,EAAAA,WAAW,EAAEW,mBAAUE,MATP;AAUhBjB,EAAAA,MAAM,EAAEe,mBAAUG,IAVF;AAWhBX,EAAAA,QAAQ,EAAEQ,mBAAUG,IAXJ;AAYhBV,EAAAA,QAAQ,EAAEO,mBAAUI,IAZJ;AAahB,KAAGC;AAba,CAAlB","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ControlledInput from \"./controlledinput\";\nimport {\n  classString,\n} from \"../utils/class\";\nimport {\n  bringAll,\n} from \"../utils/modifier\";\nimport {\n  classNamePropType,\n  allModifiersPropList,\n} from \"../utils/props\";\n\n/**\n * Props:\n * - className\n * - type(\"text\", \"password\", \"email\", \"tel\", \"number\") :default to \"text\"\n * - placeholder\n * - stateName: Name of the property referenced in stateObj.state. If not\n * provided will default to name.\n * - name: HTML name property for the form\n * - stateObj: object with both state and setState to handle updates\n * - static\n * - disabled\n * - value*: updated using stateObj.state[propName]\n * - readonly*: updated using stateObj.state[\"readonly\"]\n * - inputRef: ref to pass to the actual input element\n * - onChange: handle change on the input\n * - All Bulma modifiers\n *\n * Values marked with a star are replaced by value from context if applicable.\n * If stateObj is provided, it will get updates to the state as needed\n * automatically.\n */\nexport default class Input extends ControlledInput {\n  _getType() {\n    return this.props.type || \"text\";\n  }\n\n  render() {\n    const classes = [\"input\"];\n    bringAll(classes, this.props);\n    if (this.props.static) {\n      classes.push(\"is-static\");\n    }\n    return <input \n      className={classString(classes, this.props.className)}\n      name={this.props.name}\n      type={this._getType()}\n      placeholder={this.props.placeholder}\n      value={this.getStateValue()}\n      readOnly={this.getReadOnly()}\n      disabled={this.props.disabled}\n      ref={this.props.inputRef}\n      onChange={ev => this.setStateValue(ev.target.value)} />;\n  }\n}\nInput.propTypes = {\n  className: classNamePropType,\n  type: PropTypes.oneOf([\n    \"text\",\n    \"password\",\n    \"email\",\n    \"tel\",\n    \"number\",\n  ]),\n  placeholder: PropTypes.string,\n  static: PropTypes.bool,\n  disabled: PropTypes.bool,\n  inputRef: PropTypes.func,\n  ...allModifiersPropList,\n};"],"file":"input.js"}