{"version":3,"sources":["../../lib/form/select.mjs"],"names":["Select","ControlledInput","_handleChange","htmlOptions","values","Array","from","map","opt","value","setStateValue","_renderChildren","React","Children","props","children","child","cloneElement","activeValues","getStateValue","render","classes","getReadOnly","className","multiple","disabled","ev","target","selectedOptions","propTypes","classNamePropType","PropTypes","bool","allModifiersPropList","Option","Component","isSelected","include","string","arrayOf","node"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAGA;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;AAmBe,MAAMA,MAAN,SAAqBC,wBAArB,CAAqC;AAClDC,EAAAA,aAAa,CAACC,WAAD,EAAc;AACzB,UAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWH,WAAX,EAAwBI,GAAxB,CAA4BC,GAAG,IAAIA,GAAG,CAACC,KAAvC,CAAf;AACA,SAAKC,aAAL,CAAmBN,MAAnB;AACD;;AAEDO,EAAAA,eAAe,GAAG;AAChB,WAAOC,eAAMC,QAAN,CAAeN,GAAf,CAAmB,KAAKO,KAAL,CAAWC,QAA9B,EAAwCC,KAAK,IAAIJ,eAAMK,YAAN,CACtDD,KADsD,EAEtD;AACEE,MAAAA,YAAY,EAAE,KAAKC,aAAL;AADhB,KAFsD,CAAjD,CAAP;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,OAAO,GAAG,CAAC,QAAD,CAAhB;AACA,4BAASA,OAAT,EAAkB,KAAKP,KAAvB;AACA,WAAO;AACL,MAAA,QAAQ,EAAE,KAAKQ,WAAL,EADL;AAEL,MAAA,SAAS,EAAE,wBAAYD,OAAZ,EAAqB,KAAKP,KAAL,CAAWS,SAAhC;AAFN,OAGL;AACE,MAAA,QAAQ,EAAE,KAAKT,KAAL,CAAWU,QADvB;AAEE,MAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWW,QAFvB;AAGE,MAAA,QAAQ,EAAEC,EAAE,IAAI,KAAKxB,aAAL,CAAmBwB,EAAE,CAACC,MAAH,CAAUC,eAA7B;AAHlB,OAIG,KAAKjB,eAAL,EAJH,CAHK,CAAP;AAUD;;AA5BiD;;;AA8BpDX,MAAM,CAAC6B,SAAP,GAAmB;AACjBN,EAAAA,SAAS,EAAEO,wBADM;AAEjBN,EAAAA,QAAQ,EAAEO,mBAAUC,IAFH;AAGjBP,EAAAA,QAAQ,EAAEM,mBAAUC,IAHH;AAIjB,KAAGC;AAJc,CAAnB;AAOA;;;;;;;AAMA,MAAMC,MAAN,SAAqBtB,eAAMuB,SAA3B,CAAqC;AACnCf,EAAAA,MAAM,GAAG;AACP,UAAMgB,UAAU,GAAG,KAAKtB,KAAL,CAAWI,YAAX,CAAwBmB,OAAxB,CAAgC,KAAKvB,KAAL,CAAWL,KAA3C,CAAnB;AACA,UAAMY,OAAO,GAAG,EAAhB;AACA,WAAO;AACL,MAAA,SAAS,EAAE,wBAAYA,OAAZ,EAAqB,KAAKP,KAAL,CAAWS,SAAhC,CADN;AAEL,MAAA,KAAK,EAAE,KAAKT,KAAL,CAAWL,KAFb;AAGL,MAAA,QAAQ,EAAE2B;AAHL,OAIJ,KAAKtB,KAAL,CAAWC,QAJP,CAAP;AAMD;;AAVkC;;AAYrCmB,MAAM,CAACL,SAAP,GAAmB;AACjBN,EAAAA,SAAS,EAAEO,wBADM;AAEjBrB,EAAAA,KAAK,EAAEsB,mBAAUO,MAFA;AAGjBpB,EAAAA,YAAY,EAAEa,mBAAUQ,OAAV,CAAkBR,mBAAUO,MAA5B,CAHG;AAIjBvB,EAAAA,QAAQ,EAAEgB,mBAAUS;AAJH,CAAnB;AAMAxC,MAAM,CAACkC,MAAP,GAAgBA,MAAhB","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ControlledInput from \"./controlledinput\";\nimport {\n  classString,\n} from \"../utils/class\";\nimport {\n  bringAll,\n} from \"../utils/modifier\";\nimport {\n  classNamePropType,\n  allModifiersPropList,\n} from \"../utils/props\";\n\n/**\n * Props:\n * - className\n * - readOnly*\n * - value*\n * - onChange\n * - disabled\n * - stateName: Name of the property referenced in stateObj.state. If not\n * provided will default to name.\n * - name: HTML name property for the form\n * - stateObj: object with both state and setState to handle updates\n * - multiple\n * - All bulma modifiers\n * \n * See form.Input for stateObj behavior.\n * \n * @note\n * Use Select.Option for options\n */\nexport default class Select extends ControlledInput {\n  _handleChange(htmlOptions) {\n    const values = Array.from(htmlOptions).map(opt => opt.value);\n    this.setStateValue(values);\n  }\n\n  _renderChildren() {\n    return React.Children.map(this.props.children, child => React.cloneElement(\n      child,\n      {\n        activeValues: this.getStateValue(),\n      }\n    ));\n  }\n\n  render() {\n    const classes = [\"select\"];\n    bringAll(classes, this.props);\n    return <div\n      readOnly={this.getReadOnly()}\n      className={classString(classes, this.props.className)}>\n      <select\n        multiple={this.props.multiple}\n        disabled={this.props.disabled}\n        onChange={ev => this._handleChange(ev.target.selectedOptions)}>\n        {this._renderChildren()}\n      </select>\n    </div>;\n  }\n}\nSelect.propTypes = {\n  className: classNamePropType,\n  multiple: PropTypes.bool,\n  disabled: PropTypes.bool,\n  ...allModifiersPropList,\n};\n\n/**\n * Props:\n * - className\n * - value\n * - All Bulma modifiers\n */\nclass Option extends React.Component {\n  render() {\n    const isSelected = this.props.activeValues.include(this.props.value);\n    const classes = [];\n    return <option\n      className={classString(classes, this.props.className)}\n      value={this.props.value}\n      selected={isSelected}>\n      {this.props.children}\n    </option>;\n  }\n}\nOption.propTypes = {\n  className: classNamePropType,\n  value: PropTypes.string,\n  activeValues: PropTypes.arrayOf(PropTypes.string),\n  children: PropTypes.node,\n};\nSelect.Option = Option;"],"file":"select.js"}