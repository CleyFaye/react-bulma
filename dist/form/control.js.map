{"version":3,"sources":["../../lib/form/control.mjs"],"names":["Control","React","Component","_prepareIcon","iconProp","position","classes","props","size","push","_prepareIcons","controlClasses","result","iconLeft","iconRight","_renderChildren","render","expanded","stateObj","state","loading","icons","className","children","propTypes","classNamePropType","PropTypes","node","iconSize","allModifiersPropList","bool","object"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAGA;;AAIA;;AAIA;;;;AAIA;;;;;;;;;;;;AAYe,MAAMA,OAAN,SAAsBC,eAAMC,SAA5B,CAAsC;AACnD;;;;;;;;AAQAC,EAAAA,YAAY,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAC/B,QAAI,CAACD,QAAL,EAAe;AACb;AACD;;AACD,UAAME,OAAO,GAAG,CAAC,MAAD,CAAhB;AACA,kCAAeA,OAAf,EAAwB,KAAKC,KAA7B,EAAoC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAApC;AACAF,IAAAA,OAAO,CAACG,IAAR,CAAc,MAAKJ,QAAS,EAA5B;AACA,WAAO;AAAK,MAAA,GAAG,EAAEA,QAAV;AAAoB,MAAA,SAAS,EAAE,wBAAYC,OAAZ;AAA/B,OACJF,QADI,CAAP;AAGD;AAED;;;;;;;;;AAOAM,EAAAA,aAAa,CAACC,cAAD,EAAiB;AAC5B,UAAMC,MAAM,GAAG,EAAf;;AACA,QAAI,KAAKL,KAAL,CAAWM,QAAf,EAAyB;AACvBF,MAAAA,cAAc,CAACF,IAAf,CAAoB,gBAApB;AACAG,MAAAA,MAAM,CAACH,IAAP,CAAY,KAAKN,YAAL,CAAkB,KAAKI,KAAL,CAAWM,QAA7B,EAAuC,MAAvC,CAAZ;AACD;;AACD,QAAI,KAAKN,KAAL,CAAWO,SAAf,EAA0B;AACxBH,MAAAA,cAAc,CAACF,IAAf,CAAoB,iBAApB;AACAG,MAAAA,MAAM,CAACH,IAAP,CAAY,KAAKN,YAAL,CAAkB,KAAKI,KAAL,CAAWO,SAA7B,EAAwC,OAAxC,CAAZ;AACD;;AACD,WAAOF,MAAP;AACD;;AAEDG,EAAAA,eAAe,GAAG;AAChB,WAAO,uCACL,KAAKR,KADA,EAEL;AACEC,MAAAA,IAAI,EAAE;AADR,KAFK,CAAP;AAKD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,UAAMV,OAAO,GAAG,CAAC,SAAD,CAAhB;AACA,4BAASA,OAAT,EAAkB,KAAKC,KAAvB;;AACA,QAAI,KAAKA,KAAL,CAAWU,QAAf,EAAyB;AACvBX,MAAAA,OAAO,CAACG,IAAR,CAAa,aAAb;AACD;;AACD,QAAI,KAAKF,KAAL,CAAWW,QAAX,IAAuB,KAAKX,KAAL,CAAWW,QAAX,CAAoBC,KAApB,CAA0BC,OAArD,EAA8D;AAC5Dd,MAAAA,OAAO,CAACG,IAAR,CAAa,YAAb;AACD;;AACD,UAAMY,KAAK,GAAG,KAAKX,aAAL,CAAmBJ,OAAnB,CAAd;;AACA,WAAO;AAAK,MAAA,SAAS,EAAE,wBAAYA,OAAZ,EAAqB,KAAKC,KAAL,CAAWe,SAAhC;AAAhB,OACJ,KAAKf,KAAL,CAAWgB,QADP,EAEJF,KAFI,CAAP;AAID;;AA/DkD;;;AAiErDrB,OAAO,CAACwB,SAAR,GAAoB;AAClBF,EAAAA,SAAS,EAAEG,wBADO;AAElBF,EAAAA,QAAQ,EAAEG,mBAAUC,IAFF;AAGlBd,EAAAA,QAAQ,EAAEa,mBAAUC,IAHF;AAIlBb,EAAAA,SAAS,EAAEY,mBAAUC,IAJH;AAKlBC,EAAAA,QAAQ,EAAEC,4BAAqBrB,IALb;AAMlBS,EAAAA,QAAQ,EAAES,mBAAUI,IANF;AAOlBZ,EAAAA,QAAQ,EAAEQ,mBAAUK,MAPF;AAQlB,KAAGF;AARe,CAApB","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  classString,\n} from \"../utils/class\";\nimport {\n  bringAll,\n  bringModifiers,\n} from \"../utils/modifier\";\nimport {\n  classNamePropType,\n  allModifiersPropList,\n} from \"../utils/props\";\nimport {\n  renderChildrenWithProps,\n} from \"../utils/children\";\n\n/**\n * For holding input, select, button.\n * \n * Props:\n * - className\n * - iconLeft\n * - iconRight\n * - iconSize\n * - expanded(bool)\n * - stateObj: used to override loading if stateObj.state.loading is true.\n * - All bulma modifiers\n */\nexport default class Control extends React.Component {\n  /** Prepare one icon.\n   * \n   * @param {Node} iconProp\n   * @param {string} position\n   * \n   * @returns {Object}\n   * The prepared icon (or undefined if no icon provided)\n   */\n  _prepareIcon(iconProp, position) {\n    if (!iconProp) {\n      return;\n    }\n    const classes = [\"icon\"];\n    bringModifiers(classes, this.props, {size: \"iconSize\"});\n    classes.push(`is-${position}`);\n    return <div key={position} className={classString(classes)}>\n      {iconProp}\n    </div>;\n  }\n\n  /** Prepare the icons.\n   * \n   * @param {Array.<{string}>} controlClasses\n   * \n   * @return {Array.<{object}>}\n   * Array of elements to display.\n   */\n  _prepareIcons(controlClasses) {\n    const result = [];\n    if (this.props.iconLeft) {\n      controlClasses.push(\"has-icons-left\");\n      result.push(this._prepareIcon(this.props.iconLeft, \"left\"));\n    }\n    if (this.props.iconRight) {\n      controlClasses.push(\"has-icons-right\");\n      result.push(this._prepareIcon(this.props.iconRight, \"right\"));\n    }\n    return result;\n  }\n\n  _renderChildren() {\n    return renderChildrenWithProps(\n      this.props,\n      {\n        size: true,\n      });\n  }\n\n  render() {\n    const classes = [\"control\"];\n    bringAll(classes, this.props);\n    if (this.props.expanded) {\n      classes.push(\"is-expanded\");\n    }\n    if (this.props.stateObj && this.props.stateObj.state.loading) {\n      classes.push(\"is-loading\");\n    }\n    const icons = this._prepareIcons(classes);\n    return <div className={classString(classes, this.props.className)}>\n      {this.props.children}\n      {icons}\n    </div>;\n  }\n}\nControl.propTypes = {\n  className: classNamePropType,\n  children: PropTypes.node,\n  iconLeft: PropTypes.node,\n  iconRight: PropTypes.node,\n  iconSize: allModifiersPropList.size,\n  expanded: PropTypes.bool,\n  stateObj: PropTypes.object,\n  ...allModifiersPropList,\n};"],"file":"control.js"}