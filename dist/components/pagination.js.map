{"version":3,"sources":["../../lib/components/pagination.js"],"names":["Pagination","React","Component","handleClick","pageId","props","onSelect","_getPageCount","_getPageLast","_getPageFirst","pageCount","undefined","start","end","_getMaxVisible","maxVisible","_centralGroupMaxSize","_centralGroupSideSize","Math","ceil","_current","current","_centralLeftBound","leftBound","_centralRightBound","rightBound","_haveEllipsisLeft","_haveEllipsisRight","_createButton","page","className","_createEllipsis","render","buttons","push","index","last","buttonSection","hideButtons","previousLabel","nextLabel","navClasses","rounded","size","propTypes","PropTypes","number","bool","string","func"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport sizeToClass from \"../utils\";\n\n/**\n * Props:\n * - start: first page displayed (overriden by pageCount)\n * - current\n * - end: last page displayed (overriden by pageCount)\n * - pageCount: total number of pages starting from 1 (optional)\n * - maxVisible: max number of visible page buttons. If missing, display them\n *   all.\n * - hideButtons: hide the Previous/next buttons\n * - previousLabel\n * - nextLabel\n * - rounded: if buttons must be rounded\n * - size: default to normal\n * - onSelect: callback that receive the newly selected page\n */\nexport class Pagination extends React.Component {\n  handleClick(pageId) {\n    if (this.props.onSelect) {\n      this.props.onSelect(pageId);\n    }\n  }\n\n  _getPageCount() {\n    return this._getPageLast() - this._getPageFirst() + 1;\n  }\n\n  _getPageFirst() {\n    return (this.props.pageCount !== undefined)\n      ? 1\n      : this.props.start;\n  }\n\n  _getPageLast() {\n    return (this.props.pageCount !== undefined)\n      ? this.props.pageCount\n      : this.props.end;\n  }\n\n  _getMaxVisible() {\n    return this.props.maxVisible\n      ? this.props.maxVisible\n      : this._getPageCount();\n  }\n\n  /** Maximum size of the \"central group\" of buttons */\n  _centralGroupMaxSize() {\n    return this._getMaxVisible() - 2;\n  }\n\n  /** Maximum number of buttons on each side of the \"current\" page */\n  _centralGroupSideSize() {\n    return Math.ceil(this._centralGroupMaxSize() / 2);\n  }\n\n  _current() {\n    return this.props.current;\n  }\n\n  _centralLeftBound() {\n    const leftBound = this._current() - this._centralGroupSideSize();\n    return (leftBound <= this._getPageFirst())\n      ? this._getPageFirst() + 1\n      : leftBound;\n  }\n\n  _centralRightBound() {\n    const rightBound = this._current() + this._centralGroupSideSize();\n    return (rightBound >= this._getPageLast())\n      ? this._getPageLast() - 1\n      : rightBound;\n  }\n\n  /** Determine if we should show ellipsis on the left side */\n  _haveEllipsisLeft() {\n    return this._centralLeftBound() > (this._getPageFirst() + 1);\n  }\n\n  _haveEllipsisRight() {\n    return this._centralRightBound() < (this._getPageLast() - 1);\n  }\n\n  _createButton(page) {\n    const className = (page == this._current())\n      ? \"pagination-link is-current\"\n      : \"pagination-link\";\n    return <li>\n      <a\n        className={className}\n        onClick={() => this.handleClick(page)}>\n        page\n      </a>\n    </li>;\n  }\n\n  _createEllipsis() {\n    return <li><span className=\"pagination-ellipsis\">&hellip;</span></li>;\n  }\n\n  render() {\n    const buttons = [];\n    buttons.push(this._createButton(this._getPageFirst()));\n    if (this._haveEllipsisLeft()) {\n      buttons.push(this._createEllipsis());\n    }\n    for (let index = this._centralLeftBound(),\n      last = this._centralRightBound();\n      index <= last;\n      ++index) {\n      buttons.push(this._createButton(index));\n    }\n    if (this._haveEllipsisRight()) {\n      buttons.push(this._createEllipsis());\n    }\n    buttons.push(this._createButton(this._getPageLast()));\n\n    const buttonSection = this.props.hideButtons\n      ? undefined\n      : <React.Fragment>\n        <a className=\"pagination-previous\">{this.props.previousLabel || \"Previous\"}</a>\n        <a className=\"pagination-next\">{this.props.nextLabel || \"Next\"}</a>\n      </React.Fragment>;\n\n    const navClasses = [\"pagination\"];\n    if (this.props.rounded) {\n      navClasses.push(\"is-rounded\");\n    }\n    if (this.props.size) {\n      navClasses.push(sizeToClass(this.props.size));\n    }\n\n    return <nav\n      className={navClasses}\n      role=\"navigation\">\n      {buttonSection}\n      <ul className=\"pagination-list\">\n        {buttons}\n      </ul>\n    </nav>;\n  }\n}\nPagination.propTypes = {\n  start: PropTypes.number,\n  current: PropTypes.number,\n  end: PropTypes.number,\n  pageCount: PropTypes.number,\n  maxVisible: PropTypes.number,\n  hideButtons: PropTypes.bool,\n  previousLabel: PropTypes.string,\n  nextLabel: PropTypes.string,\n  rounded: PropTypes.bool,\n  size: PropTypes.string,\n  onSelect: PropTypes.func,\n};\n\n"],"file":"pagination.js"}