{"version":3,"sources":["../../lib/utils/children.mjs"],"names":["renderChildrenWithProps","props","propList","extraProps","replacement","Object","assign","keys","forEach","replacementPropName","sourcePropName","length","React","Children","map","children","child","cloneElement"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;AAkBO,MAAMA,uBAAuB,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,UAAlB,KAAiC;AACtE,QAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,UAAU,GAAGA,UAAH,GAAgB,EAA5C,CAApB;AACAE,EAAAA,MAAM,CAACE,IAAP,CAAYL,QAAZ,EAAsBM,OAAtB,CAA8BC,mBAAmB,IAAI;AACnD,QAAIC,cAAc,GAAGR,QAAQ,CAACO,mBAAD,CAA7B;;AACA,QAAIC,cAAc,KAAK,IAAvB,EAA6B;AAC3BA,MAAAA,cAAc,GAAGD,mBAAjB;AACD;;AACD,QAAIR,KAAK,CAACS,cAAD,CAAT,EAA2B;AACzBN,MAAAA,WAAW,CAACK,mBAAD,CAAX,GAAmCR,KAAK,CAACS,cAAD,CAAxC;AACD;AACF,GARD;;AASA,MAAIL,MAAM,CAACE,IAAP,CAAYH,WAAZ,EAAyBO,MAAzB,GAAkC,CAAtC,EAAyC;AACvC,WAAOC,eAAMC,QAAN,CAAeC,GAAf,CAAmBb,KAAK,CAACc,QAAzB,EAAmCC,KAAK,IAAIJ,eAAMK,YAAN,CACjDD,KADiD,EAEjDZ,WAFiD,CAA5C,CAAP;AAID;;AACD,SAAOH,KAAK,CAACc,QAAb;AACD,CAlBM","sourcesContent":["import React from \"react\";\n\n/** Render childrens with some props replacement.\n * \n * @param {hash} props\n * Original object props (including props.children)\n * \n * @param {hash} propList\n * List of props to import from the original object. Each key is a destination\n * prop name, each value is either true to keep the same name or a source prop\n * name.\n * For example, having `size: \"iconSize\"` would add a prop named \"size\" to all\n * children with the value from the original \"iconSize\" prop.\n * \n * @param {hash} extraProps\n * List of props to append to all childs\n * \n * @returns {Node}\n * Something that can be put as a return value for render().\n */\nexport const renderChildrenWithProps = (props, propList, extraProps) => {\n  const replacement = Object.assign({}, extraProps ? extraProps : {});\n  Object.keys(propList).forEach(replacementPropName => {\n    let sourcePropName = propList[replacementPropName];\n    if (sourcePropName === true) {\n      sourcePropName = replacementPropName;\n    }\n    if (props[sourcePropName]) {\n      replacement[replacementPropName] = props[sourcePropName];\n    }\n  });\n  if (Object.keys(replacement).length > 0) {\n    return React.Children.map(props.children, child => React.cloneElement(\n      child,\n      replacement,\n    ));\n  }\n  return props.children;\n};"],"file":"children.js"}