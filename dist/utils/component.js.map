{"version":3,"sources":["../../lib/utils/component.mjs"],"names":["Component","React","constructor","props","state","prepareState","Object","assign","updateState","Promise","resolve","setState"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;AAKe,MAAMA,SAAN,SAAwBC,eAAMD,SAA9B,CAAwC;AACrDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;AAED;;;;;;;;AAMAC,EAAAA,YAAY,CAACD,KAAD,EAAQ;AAClBE,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKH,KAAnB,EAA0BA,KAA1B;AACD;AAED;;;;;;;;;;AAQAI,EAAAA,WAAW,CAACJ,KAAD,EAAQ;AACjB,WAAO,IAAIK,OAAJ,CAAYC,OAAO,IAAI,KAAKC,QAAL,CAAcP,KAAd,EAAqB,MAAMM,OAAO,EAAlC,CAAvB,CAAP;AACD;;AA1BoD","sourcesContent":["import React from \"react\";\n\n/** Helper to use React components with promise and inheritance.\n * \n * In addition to being able to use the methods of this class, you should not\n * initialize the state with an assignment but use the prepareState() method.\n */\nexport default class Component extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  /** Put properties in the state.\n   * \n   * Instead of doing `this.state = {/*...*\\/}` in the constructor call this\n   * method; it makes sure that when you inherit you don't erase the state\n   * from other classes.\n   */\n  prepareState(state) {\n    Object.assign(this.state, state);\n  }\n\n  /** Update the state (replace setState())\n   * \n   * @param {object|function} state\n   * Same behavior as setState()\n   * \n   * @returns {Promise}\n   * The promise resolve when the state is applied\n   */\n  updateState(state) {\n    return new Promise(resolve => this.setState(state, () => resolve()));\n  }\n}"],"file":"component.js"}