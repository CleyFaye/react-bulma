{"version":3,"sources":["../../lib/utils/modifier.mjs"],"names":["bringAll","classes","propList","options","color","size","outlined","loading","pulledLeft","pulledRight","marginLess","paddingLess","overlay","clipped","radiusless","shadowless","unselectable","invisible","srOnly","responsive","textColor","backgroundColor","textSize","textAlign","capitalization","italic","textWeight","bringModifiers","bringColorOverride","bringTextTransform","bringSinglePropFromOptions","bringResponsive","bringTextSize","bringTextAlign","helpers","Object","keys","reduce","helperName","optionDef","propName","list","colorList","sizeList","boolList","transform","maringLess","prop","value","responsiveHelperList","Error","fullColorList","alignment","alignmentList","includes","capitalizationList","textWeightList"],"mappings":"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","sourcesContent":["import {\n  colorList,\n  fullColorList,\n  sizeList,\n  boolList,\n  responsiveHelperList,\n  alignmentList,\n  capitalizationList,\n  textWeightList,\n} from \"./const\";\nimport {\n  addClassesFromOptions,\n  addClassesWithViewportSuffix,\n} from \"./class\";\nimport {\n  boolProp,\n} from \"./transform\";\n\n/** Add all available modifiers in one call\n * \n * @param {Array.<{string}>} classes\n * @param {hash} propList\n * @param {hash} options\n * Merge all other options list, with addition of:\n * - responsive: see bringResponsive()\n * - textSize: see bringTextSize()\n * - textAlign: see bringTextAlign()\n * If not specified, everything is enabled.\n * \n * @see\n * Other functions in this module for details.\n */\nexport const bringAll = (classes, propList, options) => {\n  if (!options) {\n    options = {\n      color: true,\n      size: true,\n      outlined: true,\n      loading: true,\n      pulledLeft: true,\n      pulledRight: true,\n      marginLess: true,\n      paddingLess: true,\n      overlay: true,\n      clipped: true,\n      radiusless: true,\n      shadowless: true,\n      unselectable: true,\n      invisible: true,\n      srOnly: true,\n      responsive: true,\n      textColor: true,\n      backgroundColor: true,\n      textSize: true,\n      textAlign: true,\n      capitalization: true,\n      italic: true,\n      textWeight: true,\n    };\n  }\n  bringModifiers(classes, propList, options);\n  bringColorOverride(classes, propList, options);\n  bringTextTransform(classes, propList, options);\n  bringSinglePropFromOptions(\n    classes,\n    propList,\n    options,\n    {\n      responsive: bringResponsive,\n      textSize: bringTextSize,\n      textAlign: bringTextAlign,\n    });\n};\n\nconst bringSinglePropFromOptions = \n  (classes, propList, options, helpers) => Object.keys(helpers).reduce(\n    (classes, helperName) => {\n      const optionDef = options[helperName];\n      if (!optionDef) {\n        return classes;\n      }\n      const propName = typeof optionDef == \"string\" ? optionDef : helperName;\n      return helpers[helperName](classes, propList[propName]);\n    },\n    classes);\n\n/** Add common modifiers into a list of classes\n *\n * @param {Array.<{string}>} classes\n * @param {hash} propList\n * @param {hash} options\n * List of modifiers to merge into classes.\n * Each property can have either \"true\" or a name as their value.\n * If true, the property name is used as a lookup into propList.\n * Otherwise a property with the given name is used instead.\n * Supported properties:\n * - color (primary, link, info, success, warning, danger)\n * - size (small, medium, large)\n * - outlined\n * - loading\n * - pulledLeft\n * - pulledRight\n * - marginLess\n * - paddingLess\n * - overlay\n * - clipped\n * - radiusless\n * - shadowless\n * - unselectable\n * - invisible\n * - srOnly\n */\nexport const bringModifiers = (classes, propList, options) => \n  addClassesFromOptions(\n    classes,\n    propList,\n    options,\n    {\n      color: {list: colorList},\n      size: {list: sizeList},\n      outlined: {list: boolList, transform: boolProp(\"outlined\")},\n      loading: {list: boolList, transform: boolProp(\"loading\")},\n      pulledLeft: {list: boolList, transform: boolProp(\"pulled-left\")},\n      pulledRight: {list: boolList, transform: boolProp(\"pulled-right\")},\n      maringLess: {list: boolList, transform: boolProp(\"marginless\")},\n      paddingLess: {list: boolList, transform: boolProp(\"paddingless\")},\n      overlay: {list: boolList, transform: boolProp(\"overlay\")},\n      clipped: {list: boolList, transform: boolProp(\"clipped\")},\n      radiusless: {list: boolList, transform: boolProp(\"radiusless\")},\n      shadowless: {list: boolList, transform: boolProp(\"shadowless\")},\n      unselectable: {list: boolList, transform: boolProp(\"unselectable\")},\n      invisible: {list: boolList, transform: boolProp(\"invisible\")},\n      srOnly: {list: boolList, transform: boolProp(\"sr-only\")},\n    });\n\n/** Add common responsive helpers into a list of classes\n *\n * @param {Array.<{string}>} classes\n * @param {string|hash} prop\n * The show/hide class to use. It can be either a string or a hash,\n * in which case each key must be a proper viewport name and each value the\n * helper class to use.\n * \n * @returns {Array.<{string}>}\n * Return classes\n * \n * @note\n * This correspond to the responsive helpers documentation from Bulma.io.\n */\nexport const bringResponsive = (classes, prop) => {\n  if (!prop) {\n    return classes;\n  }\n  addClassesWithViewportSuffix(\n    classes,\n    prop,\n    value => {\n      if (!responsiveHelperList[value]) {\n        throw new Error(`Unknown helper name \"${value}\"`);\n      }\n      return `is-${responsiveHelperList[value]}`;\n    });\n  return classes;\n};\n\n/** Add common text and background color selector.\n * \n * @param {Array.<{string}>} classes\n * @param {hash} propList\n * @param {hash} options\n * Select which modifier to use. See bringModifiers() for details.\n * Available options:\n * - textColor\n * - backgroundColor\n */\nexport const bringColorOverride = (classes, propList, options) =>\n  addClassesFromOptions(\n    classes,\n    propList,\n    options,\n    {\n      textColor: {\n        list: fullColorList,\n        transform: value => `has-text-${value}`,\n      },\n      backgroundColor: {\n        list: fullColorList,\n        transform: value => `has-background-${value}`,\n      },\n    });\n\n/** Add test size specifier to list of classes\n * \n * @param {Array.<{string}>} classes\n * @param {number|hash} prop\n * Text size property. Either a number from 1 to 7 or a hash where keys are\n * viewport names and values are sizes.\n * \n * @returns {Array.<{string}>}\n * Return classes\n */\nexport const bringTextSize = (classes, prop) => {\n  if (!prop) {\n    return classes;\n  }\n  addClassesWithViewportSuffix(\n    classes,\n    prop,\n    size => {\n      if (size < 1 || size > 7) {\n        throw new Error(`Invalid size ${size} (1 <= size <= 7)`);\n      }\n      return `is-size-${size}`;\n    });\n  return classes;\n};\n\n/** Add test alignment specifier to list of classes\n * \n * @param {Array.<{string}>} classes\n * @param {string|hash} prop\n * Text size property. Either an alignment value or a hash where keys are\n * viewport names and values are alignment.\n * Valid values:\n * - centered\n * - justified\n * - left\n * - right\n * \n * @returns {Array.<{string}>}\n * Return classes\n */\nexport const bringTextAlign = (classes, prop) => {\n  if (!prop) {\n    return classes;\n  }\n  addClassesWithViewportSuffix(\n    classes,\n    prop,\n    alignment => {\n      if (!alignmentList.includes(alignment)) {\n        throw new Error(`Invalid alignment \"${alignment}\"`);\n      }\n      return `has-text-${alignment}`;\n    });\n  return classes;\n};\n\n/** Add common text modifiers into a list of classes\n *\n * @param {Array.<{string}>} classes\n * @param {hash} propList\n * @param {hash} options\n * List of modifiers to merge into classes.\n * Each property can have either \"true\" or a name as their value.\n * If true, the property name is used as a lookup into propList.\n * Otherwise a property with the given name is used instead.\n * Supported properties:\n * - capitalization (capitalized, lowercase, uppercase)\n * - italic\n * - textWeight (light, normal, semibold, bold)\n */\nexport const bringTextTransform = (classes, propList, options) =>\n  addClassesFromOptions(\n    classes,\n    propList,\n    options,\n    {\n      capitalization: {list: capitalizationList},\n      italic: {list: boolList, transform: boolProp(\"italic\")},\n      textWeight: {\n        list: textWeightList,\n        transform: value => `has-text-weight-${value}`,\n      },\n    });"],"file":"modifier.js"}